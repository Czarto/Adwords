// Version: Delta

var BID_INCREMENT = 0.05;

var TAG_IGNORE = '';

var THRESHOLD_INCREASE = 10;    // Set this to 1 to increase bids more aggressively
var THRESHOLD_DECREASE = 1;    // Set this to 1 to decrease bids more aggressively
var THRESHOLD_SIGNIFICANT = 20; // Extra bid adjustment happens when this many conversions

var HIGH_COST = 100;    // How much is too much

var STOPLIMIT_POSITION = 1.3; // Do not increase bids at this position or better
var STOPLIMIT_ADJUSTMENT = 1.50; // Do not increase adjustments above +50%

function main() { 
  //setLocationBids(LAST_YEAR(), TODAY());
  setAdScheduleBids(LAST_YEAR(), TODAY());
  //setMobileBidModifier(LAST_YEAR(), TODAY());
  
  //setLocationBids("LAST_30_DAYS");
  setAdScheduleBids("LAST_30_DAYS");
  //setMobileBidModifier("LAST_30_DAYS");
}


function setLocationBids(dateRange, dateRangeEnd) {
 
  // Adjust for normal campaigns
  var campaignIterator = getCampaignSelector(dateRange, dateRangeEnd).get();
  
  Logger.log(' ')
  Logger.log('### ADJUST LOCATION TARGETING BIDS ###');
  Logger.log('Non-Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setLocationBidsForCampaigns(campaignIterator, dateRange, dateRangeEnd);
  
  // Adjust for Shopping campaigns
  var campaignIterator = getCampaignSelector(dateRange, dateRangeEnd, true).get();
  
  Logger.log(' ')
  Logger.log('Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setLocationBidsForCampaigns(campaignIterator, dateRange, dateRangeEnd);
}
   

//
// Sets the location bids for all the campaigns within the CampaignIterator.
//
function setLocationBidsForCampaigns(campaignIterator, dateRange, dateRangeEnd) {

  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var campaignConvRate = campaign.getStatsFor(dateRange, dateRangeEnd).getClickConversionRate();
    
    Logger.log('-- CAMPAIGN: ' + campaign.getName());
    
    var locationIterator = campaign.targeting().targetedLocations().get();

    Logger.log('----- Locations found : ' + locationIterator.totalNumEntities());
    
    while (locationIterator.hasNext()) {
      var targetedLocation = locationIterator.next();
      
      if( targetedLocation.getTargetType() != "Country" ) {
        var stats = targetedLocation.getStatsFor(dateRange, dateRangeEnd);
        var convRate = stats.getConversionRate();
        var conversions = stats.getConversions();
        var cost = stats.getCost();
        var avgPosition = stats.getAveragePosition();
        var targetBidAdjustment = convRate / campaignConvRate;
        var currentBidModifier = targetedLocation.getBidModifier();
        var locationName = targetedLocation.getName();
        var locationCountryCode = targetedLocation.getCountryCode();        
                   
        if( conversions == 0 ) {

          // Zero Conversions, Hight Cost. Drop bids by 10%.
          if( cost > HIGH_COST  ) { 
            Logger.log('        High Cost');
            var newBidModifier = Math.max(Math.min(currentBidModifier - BID_INCREMENT, 0.9),0.1);
            targetedLocation.setBidModifier(newBidModifier);           
            Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', bid modifier: ' + newBidModifier
                   + ' zero conversions & high cost');
          }
        } else {
          // At least 1 conversion
        
          // Conversion rate above average, increase bid      
          if( convRate > campaignConvRate && conversions >= THRESHOLD_INCREASE && avgPosition > STOPLIMIT_POSITION && currentBidModifier < STOPLIMIT_ADJUSTMENT) {
            var newBidModifier = currentBidModifier + BID_INCREMENT;
            if( targetBidAdjustment > newBidModifier ) {
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName
                   + ', bid modifier: ' + newBidModifier
                   + ', Better than average conversion rate. Increase bid.');
            
            }
            
          // Conversion rate below average. decrease bids
          } else if (convRate < campaignConvRate && conversions >= THRESHOLD_DECREASE) {
            var newBidModifier = Math.max(Math.min(currentBidModifier - BID_INCREMENT, 1),0.1);
            if( targetBidAdjustment < newBidModifier ) {
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', bid modifier: ' + newBidModifier
                   + ' Bad CPA, decrease bids');            
            }          
          }
        
          // Significant number of conversions. Adjust bids again.
          if( conversions > THRESHOLD_SIGNIFICANT  && avgPosition > STOPLIMIT_POSITION && currentBidModifier < STOPLIMIT_ADJUSTMENT) {
            if( targetBidAdjustment > (currentBidModifier + BID_INCREMENT) ) {
              var newBidModifier = currentBidModifier + BID_INCREMENT;
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', bid modifier: ' + newBidModifier
                   + ' Good CPA, increase bids');            
            } 
          }
        }     
      }
    }
  }   
}

function setAdScheduleBids(dateRange, dateRangeEnd) {
 
  var campaignIterator = getCampaignSelector(dateRange, dateRangeEnd).get();
  
  Logger.log(' ')
  Logger.log('### ADJUST AD SCHEDULE TARGETING BIDS ###');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setAdScheduleBidsForCampaigns( campaignIterator, dateRange, dateRangeEnd );
  
  // Adjust for Shopping campaigns
  var campaignIterator = getCampaignSelector(dateRange, dateRangeEnd, true).get();
  
  Logger.log(' ')
  Logger.log('Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setAdScheduleBidsForCampaigns(campaignIterator, dateRange, dateRangeEnd); 
}

function setAdScheduleBidsForCampaigns(campaignIterator, dateRange, dateRangeEnd) {
    
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var campaignConvRate = campaign.getStatsFor(dateRange, dateRangeEnd).getClickConversionRate();
    
    Logger.log(' ');
    Logger.log('CAMPAIGN: ' + campaign.getName());
    
    var adScheduleIterator = campaign.targeting().adSchedules().get();

    while (adScheduleIterator.hasNext()) {
      var adSchedule = adScheduleIterator.next();
      
        var stats = adSchedule.getStatsFor(dateRange, dateRangeEnd);
        var convRate = stats.getConversionRate();
        var conversions = stats.getConversions();
        var cost = stats.getCost();
        var avgPosition = stats.getAveragePosition();
        var calculatedBidAdjustment = convRate / campaignConvRate;
        var oldBidModifier = adSchedule.getBidModifier();
        var adScheduleName = adSchedule.getDayOfWeek() + ' @ ' + adSchedule.getStartHour();
        

        if( conversions > 0 ) {
        
          // Conversion rate MORE than average, Increase Bids.      
          if( convRate > campaignConvRate && avgPosition > STOPLIMIT_POSITION  && oldBidModifier < STOPLIMIT_ADJUSTMENT) {
            if( calculatedBidAdjustment > (oldBidModifier + BID_INCREMENT) ) {
              var newBidModifier = oldBidModifier + BID_INCREMENT;
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; increase bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' high conversion rate');            
            }
            
          // Conversion rate LESS than the average. Decrease bids 10%.
          } else if (convRate < campaignConvRate) {
            if( calculatedBidAdjustment < (oldBidModifier - BID_INCREMENT) ) {
              var newBidModifier = Math.max(Math.min(oldBidModifier - BID_INCREMENT, 0.9),0.1);
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; lower bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' low conversion rate');           
            }          
          }
        
          // Many Conversions. Increase bids.
          if( conversions > THRESHOLD_SIGNIFICANT  && avgPosition > STOPLIMIT_POSITION  && oldBidModifier < STOPLIMIT_ADJUSTMENT) {
            if( calculatedBidAdjustment > (oldBidModifier + BID_INCREMENT) ) {
              var newBidModifier = oldBidModifier + BID_INCREMENT;
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; increase bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' Many Conversions, Good CPA');               
            } 
          }
        }
        
        // Zero Conversions, Hight Cost. Drop bids.
        if( conversions == 0 && cost > HIGH_COST  ) { 
              var newBidModifier = Math.max(Math.min(oldBidModifier - BID_INCREMENT, 0.9),0.1);
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; lower bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' Zero conversions, high cost');    
        }        
      }
  }  
}

// Mobile Bids
function setMobileBidModifier(dateRange, dateRangeEnd) {

  var campaignIterator = getCampaignSelector(dateRange, dateRangeEnd).get();
  
  Logger.log(' ')
  Logger.log('### ADJUST MOBILE TARGETING BIDS ###');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setMobileBidModifierForCampaigns(campaignIterator, dateRange, dateRangeEnd)
  
  // Adjust for Shopping campaigns
  var campaignIterator = getCampaignSelector(dateRange, dateRangeEnd, true).get();
  
  Logger.log(' ')
  Logger.log('Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setMobileBidModifierForCampaigns(campaignIterator, dateRange, dateRangeEnd); 
}

function setMobileBidModifierForCampaigns(campaignIterator, dateRange, dateRangeEnd) {
  
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    
    Logger.log(' ');
    Logger.log('CAMPAIGN: ' + campaign.getName());
    
    var platforms = campaign.targeting().platforms();
    var desktopTargetIterator = platforms.desktop().get();
    var tabletTargetIterator = platforms.tablet().get();
    var mobileTargetIterator = platforms.mobile().get();
      
    if( desktopTargetIterator.hasNext()) {
      var desktopTarget = desktopTargetIterator.next();
      var desktopStats = desktopTarget.getStatsFor(dateRange, dateRangeEnd);
      var desktopConversionRate = desktopStats.getConversionRate();
    
      if( tabletTargetIterator.hasNext()) {
        var tabletTarget = tabletTargetIterator.next();
        var stats = tabletTarget.getStatsFor(dateRange, dateRangeEnd);
        var conversionRate = stats.getConversionRate();
        var avgPosition = stats.getAveragePosition()
        var newBidAdjustment = conversionRate / desktopConversionRate;
        var oldBidAdjustment = tabletTarget.getBidModifier();
             

        if( (tabletNewBidAdjustment > (tabletOldBidAdjustment + BID_INCREMENT))  && avgPosition > STOPLIMIT_POSITION  && oldBidAdjustment < STOPLIMIT_ADJUSTMENT ) {
          var newBidModifier = oldBidAdjustment + BID_INCREMENT;
          tabletTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Tablet Bid Modifer; '
                 + 'Increase bid: from ' + oldBidAdjustment + ' to ' + newBidModifier);            
        } else if( newBidAdjustment < (oldBidAdjustment - BID_INCREMENT) ) {
          var newBidModifier = Math.max(Math.min(oldBidAdjustment - BID_INCREMENT, 0.95),0.1);
          tabletTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Tablet Bid Modifer; '
                 + 'Lower bid: from ' + tabletOldBidAdjustment + ' to ' + newBidModifier);               
        }          
      }
      
      if( mobileTargetIterator.hasNext()) {
        var mobileTarget = mobileTargetIterator.next();
        var stats = mobileTarget.getStatsFor(dateRange, dateRangeEnd);
        var conversionRate = stats.getConversionRate();
        var avgPosition = stats.getAveragePosition()
        var newBidAdjustment = conversionRate / desktopConversionRate;
        var oldBidAdjustment = mobileTarget.getBidModifier();
                
        if(( newBidAdjustment > (oldBidAdjustment + BID_INCREMENT))  && avgPosition > STOPLIMIT_POSITION  && oldBidAdjustment < STOPLIMIT_ADJUSTMENT) {
          var newBidModifier = oldBidAdjustment + BID_INCREMENT;
          mobileTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Mobile Bid Modifer; '
                 + 'Increase bid: from ' + mobileOldBidAdjustment + ' to ' + newBidModifier);            
        } else if( newBidAdjustment < (oldBidAdjustment - BID_INCREMENT) ) {
          var newBidModifier = Math.max(Math.min(oldBidAdjustment - BID_INCREMENT, 0.9),0.1);
          mobileTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Mobile Bid Modifer; '
                 + 'Lower bid: from ' + mobileOldBidAdjustment + ' to ' + newBidModifier);               
        }
      }
    }
  }
}


//
// Returns the CampaignIterator object
//
function getCampaignSelector(dateRange, dateRangeEnd, isShopping) {
  var campaignSelector = isShopping ? AdWordsApp.shoppingCampaigns() : AdWordsApp.campaigns();
  
  campaignSelector = campaignSelector 
      .forDateRange(dateRange, dateRangeEnd)
      .withCondition("Status = ENABLED");
  
  if( TAG_IGNORE.length > 0 ) {
      campaignSelector = campaignSelector
      .withCondition("LabelNames CONTAINS_NONE ['" + TAG_IGNORE + "']");
  }
  
  return campaignSelector;
}


//
// Date formatting for logging
//
function formatSchedule(schedule) {
  function zeroPad(number) { return Utilities.formatString('%02d', number); }
  return schedule.getDayOfWeek() + ', ' +
      schedule.getStartHour() + ':' + zeroPad(schedule.getStartMinute()) +
      ' to ' + schedule.getEndHour() + ':' + zeroPad(schedule.getEndMinute());
}

function TODAY() {
  var today = new Date();
  var dd = today.getDate();
  var mm = today.getMonth()+1; //January is 0!
  var yyyy = today.getFullYear();

  return {year: yyyy, month: mm, day: dd};
}

function LAST_YEAR() {
  var today = TODAY();
  
  today.year = today.year-1;
  return today;
}
