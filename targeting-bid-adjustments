var BID_INCREMENT = 0.05;

var THRESHOLD_INCREASE = 5;    // Set this to 1 to increase bids more aggressively
var THRESHOLD_DECREASE = 1;    // Set this to 1 to decrease bids more aggressively
var THRESHOLD_SIGNIFICANT = 20; // Extra bid adjustment happens when this many conversions

var HIGH_COST = 100;    // How much is too much

function main() { 
  //setAdGroupBids("ALL_TIME");
  
  setLocationBids("LAST_30_DAYS");
  setAdScheduleBids("LAST_30_DAYS");
  setMobileBidModifier("LAST_30_DAYS");
}


function setLocationBids(dateRange) {
 
  // Adjust for normal campaigns
  var campaignIterator = AdWordsApp.campaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('### ADJUST LOCATION TARGETING BIDS ###');
  Logger.log('Non-Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setLocationBidsForCampaigns(campaignIterator, dateRange);
  
  // Adjust for Shopping campaigns
  var campaignIterator = AdWordsApp.shoppingCampaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setLocationBidsForCampaigns(campaignIterator, dateRange);
}
   

//
// Sets the location bids for all the campaigns within the CampaignIterator.
//
function setLocationBidsForCampaigns(campaignIterator, dateRange) {

  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var stats = campaign.getStatsFor(dateRange);
    var campaignConvRate = stats.getClickConversionRate();
    
    Logger.log('-- CAMPAIGN: ' + campaign.getName());
    
    var locationIterator = campaign.targeting().targetedLocations().get();

    Logger.log('----- Locations found : ' + locationIterator.totalNumEntities());
    
    while (locationIterator.hasNext()) {
      var targetedLocation = locationIterator.next();
      
      if( targetedLocation.getTargetType() != "Country" ) {
        var locationStats = targetedLocation.getStatsFor(dateRange);
        var locationConvRate = locationStats.getConversionRate();
        var locationConversions = locationStats.getConversions();
        var locationCost = locationStats.getCost();
        var targetBidAdjustment = locationConvRate / campaignConvRate;
        var currentBidModifier = targetedLocation.getBidModifier();
        var locationName = targetedLocation.getName();
        var locationCountryCode = targetedLocation.getCountryCode();        

        //Logger.log(' ');
        //Logger.log('--------' + locationName);
                   
        if( locationConversions == 0 ) {
          
          //Logger.log('        Zero Conversions');
          //Logger.log('        Cost: ' + locationCost);
        
          // Zero Conversions, Hight Cost. Drop bids by 10%.
          if( locationCost > HIGH_COST  ) { 
            Logger.log('        High Cost');
            var newBidModifier = Math.max(Math.min(currentBidModifier - BID_INCREMENT, 0.9),0.1);
            targetedLocation.setBidModifier(newBidModifier);           
            Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', bid modifier: ' + newBidModifier
                   + ' zero conversions & high cost');
          }
        } else {
          // At least 1 conversion
        
          // Conversion rate above average, increase bid      
          if( locationConvRate > campaignConvRate && locationConversions >= THRESHOLD_INCREASE ) {
            var newBidModifier = currentBidModifier + BID_INCREMENT;
            if( targetBidAdjustment > newBidModifier ) {
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName
                   + ', bid modifier: ' + newBidModifier
                   + ', Better than average conversion rate. Increase bid.');
            
            }
            
          // Conversion rate below average. decrease bids
          } else if (locationConvRate < campaignConvRate && locationConversions >= THRESHOLD_DECREASE) {
            var newBidModifier = Math.max(Math.min(currentBidModifier - BID_INCREMENT, 1),0.1);
            if( targetBidAdjustment < newBidModifier ) {
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', bid modifier: ' + newBidModifier
                   + ' Bad CPA, decrease bids');            
            }          
          }
        
          // Significant number of conversions. Adjust bids again.
          if( locationConversions > THRESHOLD_SIGNIFICANT ) {
            if( targetBidAdjustment > (currentBidModifier + BID_INCREMENT) ) {
              var newBidModifier = currentBidModifier + BID_INCREMENT;
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', bid modifier: ' + newBidModifier
                   + ' Good CPA, increase bids');            
            } 
          }
        }     
      }
    }
  }   
}

function setAdScheduleBids(dateRange) {
 
  var campaignIterator = AdWordsApp.campaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('### ADJUST AD SCHEDULE TARGETING BIDS ###');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setAdScheduleBidsForCampaigns( campaignIterator, dateRange );
  
  // Adjust for Shopping campaigns
  var campaignIterator = AdWordsApp.shoppingCampaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setAdScheduleBidsForCampaigns(campaignIterator, dateRange); 
}

function setAdScheduleBidsForCampaigns(campaignIterator, dateRange) {
    
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var stats = campaign.getStatsFor(dateRange);
    var campaignConvRate = stats.getClickConversionRate();
    
    Logger.log(' ');
    Logger.log('CAMPAIGN: ' + campaign.getName());
    
    var adScheduleIterator = campaign.targeting().adSchedules().get();

    while (adScheduleIterator.hasNext()) {
      var adSchedule = adScheduleIterator.next();
      
        var adScheduleStats = adSchedule.getStatsFor(dateRange);
        var adScheduleConvRate = adScheduleStats.getConversionRate();
        var adScheduleConversions = adScheduleStats.getConversions();
        var adScheduleCost = adScheduleStats.getCost();
        var calculatedBidAdjustment = adScheduleConvRate / campaignConvRate;
        var oldBidModifier = adSchedule.getBidModifier();
        var adScheduleName = adSchedule.getDayOfWeek() + ' @ ' + adSchedule.getStartHour();
        

        if( adScheduleConversions > 0 ) {
        
          // Conversion rate MORE than average, Increase Bids.      
          if( adScheduleConvRate > campaignConvRate ) {
            if( calculatedBidAdjustment > (oldBidModifier + BID_INCREMENT) ) {
              var newBidModifier = oldBidModifier + BID_INCREMENT;
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; increase bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' high conversion rate');            
            }
            
          // Conversion rate LESS than the average. Drop bids by 10%.
          } else if (adScheduleConvRate < campaignConvRate) {
            if( calculatedBidAdjustment < (oldBidModifier - BID_INCREMENT) ) {
              var newBidModifier = Math.max(Math.min(oldBidModifier - BID_INCREMENT, 0.9),0.1);
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; lower bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' low conversion rate');           
            }          
          }
        
          // Many Conversions. Increase bids by 10%.
          if( adScheduleConversions > THRESHOLD_SIGNIFICANT ) {
            if( calculatedBidAdjustment > (oldBidModifier + BID_INCREMENT) ) {
              var newBidModifier = oldBidModifier + BID_INCREMENT;
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; increase bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' Many Conversions, Good CPA');               
            } 
          }
        }
        
        // Zero Conversions, Hight Cost. Drop bids by 10%.
        if( adScheduleConversions == 0 && adScheduleCost > HIGH_COST  ) { 
              var newBidModifier = Math.max(Math.min(oldBidModifier - BID_INCREMENT, 0.9),0.1);
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; lower bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' Zero conversions, high cost');    
        }        
      }
  }  
}

// Mobile Bids
function setMobileBidModifier(dateRange) {

  var campaignIterator = AdWordsApp.campaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('### ADJUST MOBILE TARGETING BIDS ###');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setMobileBidModifierForCampaigns(campaignIterator, dateRange)
  
  // Adjust for Shopping campaigns
  var campaignIterator = AdWordsApp.shoppingCampaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('Shopping Campaigns');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  setMobileBidModifierForCampaigns(campaignIterator, dateRange); 
}

function setMobileBidModifierForCampaigns(campaignIterator, dateRange) {
  
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    //var stats = campaign.getStatsFor(dateRange);
    //var campaignConvRate = stats.getClickConversionRate();
    
    Logger.log(' ');
    Logger.log('CAMPAIGN: ' + campaign.getName());
    
    var desktopTargetIterator = campaign.targeting().platforms().desktop().get();
    var tabletTargetIterator = campaign.targeting().platforms().tablet().get();
    var mobileTargetIterator = campaign.targeting().platforms().mobile().get();
      
    if( desktopTargetIterator.hasNext()) {
      var desktopTarget = desktopTargetIterator.next();
      var desktopStats = desktopTarget.getStatsFor(dateRange);
      var desktopConversionRate = desktopStats.getConversionRate();
    
      if( tabletTargetIterator.hasNext()) {
        var tabletTarget = tabletTargetIterator.next();
        var tabletStats = tabletTarget.getStatsFor(dateRange);
        var tabletConversionRate = tabletStats.getConversionRate();
        var tabletNewBidAdjustment = tabletConversionRate / desktopConversionRate;
        var tabletOldBidAdjustment = tabletTarget.getBidModifier();
             

        if( tabletNewBidAdjustment > (tabletOldBidAdjustment + BID_INCREMENT) ) {
          var newBidModifier = tabletOldBidAdjustment + BID_INCREMENT;
          tabletTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Tablet Bid Modifer; '
                 + 'Increase bid: from ' + tabletOldBidAdjustment + ' to ' + newBidModifier);            
        } else if( tabletNewBidAdjustment < (tabletOldBidAdjustment - BID_INCREMENT) ) {
          var newBidModifier = Math.max(Math.min(tabletOldBidAdjustment - BID_INCREMENT, 0.95),0.1);
          tabletTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Tablet Bid Modifer; '
                 + 'Lower bid: from ' + tabletOldBidAdjustment + ' to ' + newBidModifier);               
        }          
      }
      
      if( mobileTargetIterator.hasNext()) {
        var mobileTarget = mobileTargetIterator.next();
        var mobileStats = mobileTarget.getStatsFor(dateRange);
        var mobileConversionRate = mobileStats.getConversionRate();
        var mobileNewBidAdjustment = mobileConversionRate / desktopConversionRate;
        var mobileOldBidAdjustment = mobileTarget.getBidModifier();
                
        if( mobileNewBidAdjustment > (mobileOldBidAdjustment + BID_INCREMENT) ) {
          var newBidModifier = mobileOldBidAdjustment + BID_INCREMENT;
          mobileTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Mobile Bid Modifer; '
                 + 'Increase bid: from ' + mobileOldBidAdjustment + ' to ' + newBidModifier);            
        } else if( mobileNewBidAdjustment < (mobileOldBidAdjustment - BID_INCREMENT) ) {
          var newBidModifier = Math.max(Math.min(mobileOldBidAdjustment - BID_INCREMENT, 0.9),0.1);
          mobileTarget.setBidModifier(newBidModifier);           
          Logger.log('*** UPDATE: Mobile Bid Modifer; '
                 + 'Lower bid: from ' + mobileOldBidAdjustment + ' to ' + newBidModifier);               
        }
      }
    }
  }
}

function formatSchedule(schedule) {
  function zeroPad(number) { return Utilities.formatString('%02d', number); }
  return schedule.getDayOfWeek() + ', ' +
      schedule.getStartHour() + ':' + zeroPad(schedule.getStartMinute()) +
      ' to ' + schedule.getEndHour() + ':' + zeroPad(schedule.getEndMinute());
}

