var MAX_INCREASE = 0.1
var MAX_MIN_LEVEL = 0.9
var CONVERSION_THRESHOLD = 25;
var CONVERSION_VALUE = 50;

function main() { 
  //setAdGroupBids("ALL_TIME");
  
  //setLocationBids("LAST_30_DAYS");
  setAdScheduleBids("LAST_30_DAYS");
}


function setLocationBids(dateRange) {
 
  var campaignIterator = AdWordsApp.campaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('### ADJUST LOCATION TARGETING BIDS ###');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var stats = campaign.getStatsFor(dateRange);
    var campaignConvRate = stats.getClickConversionRate();
    
    // For each location with conversions > 25, calculate the required conversion rate.
    
    var locationIterator = campaign.targeting().targetedLocations().get();

    while (locationIterator.hasNext()) {
      var targetedLocation = locationIterator.next();
      
      if( targetedLocation.getTargetType() != "Country" ) {

        var locationStats = targetedLocation.getStatsFor(dateRange);
        var locationConvRate = locationStats.getConversionRate();
        var locationConversions = locationStats.getConversions();
        var locationCost = locationStats.getCost();
        var calculatedBidAdjustment = locationConvRate / campaignConvRate;
        var oldBidModifier = targetedLocation.getBidModifier();
        var locationName = targetedLocation.getName();
        var locationCountryCode = targetedLocation.getCountryCode();
        //Logger.log('Location name: ' + locationName  + ', country code: ' + locationCountryCode + ', bid modifier: ' + oldBidModifier);
        

        if( locationConversions > 0 ) {
        
          // Conversion rate MORE than average, but current bid is negative. Increase by 10%.      
          if( locationConvRate > campaignConvRate && oldBidModifier < MAX_MIN_LEVEL ) {
            if( calculatedBidAdjustment > (oldBidModifier + MAX_INCREASE) ) {
              var newBidModifier = oldBidModifier + MAX_INCREASE;
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', country code: ' + locationCountryCode
                   + ', bid modifier: ' + newBidModifier);
            
            }
            
          // Conversion rate LESS than the average. Drop bids by 10%.
          } else if (locationConvRate < campaignConvRate) {
            if( calculatedBidAdjustment < (oldBidModifier - MAX_INCREASE) ) {
              var newBidModifier = Math.max(Math.min(oldBidModifier - MAX_INCREASE, 0.9),0.1);
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', country code: ' + locationCountryCode
                   + ', bid modifier: ' + newBidModifier);
            
            }          
          }
        
          // Many Conversions. Increase bids by 10%.
          if( locationConversions > CONVERSION_THRESHOLD ) {
            if( calculatedBidAdjustment > (oldBidModifier + MAX_INCREASE) ) {
              var newBidModifier = oldBidModifier + MAX_INCREASE;
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', country code: ' + locationCountryCode
                   + ', bid modifier: ' + newBidModifier);
            
            } 
          }
        }
        
        // Zero Conversions, Hight Cost. Drop bids by 10%.
        if( locationConversions == 0 && locationCost > CONVERSION_VALUE  ) { 
              var newBidModifier = Math.max(Math.min(oldBidModifier - MAX_INCREASE, 0.9),0.1);
              targetedLocation.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE *** Location name: ' + locationName 
                   + ', country code: ' + locationCountryCode
                   + ', bid modifier: ' + newBidModifier);
        }        
      }
    }
  }   
}


function setAdScheduleBids(dateRange) {
 
  var campaignIterator = AdWordsApp.campaigns()
      .forDateRange(dateRange)
      .withCondition("Status = ENABLED")
      .withCondition("LabelNames CONTAINS_NONE ['Script Ignore']")
      .get();
  
  Logger.log(' ')
  Logger.log('### ADJUST AD SCHEDULE TARGETING BIDS ###');
  Logger.log('Total Campaigns found : ' + campaignIterator.totalNumEntities());
  
  while (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    var stats = campaign.getStatsFor(dateRange);
    var campaignConvRate = stats.getClickConversionRate();
    
    Logger.log(' ');
    Logger.log('CAMPAIGN: ' + campaign.getName());
    
    var adScheduleIterator = campaign.targeting().adSchedules().get();

    while (adScheduleIterator.hasNext()) {
      var adSchedule = adScheduleIterator.next();
      
        var adScheduleStats = adSchedule.getStatsFor(dateRange);
        var adScheduleConvRate = adScheduleStats.getConversionRate();
        var adScheduleConversions = adScheduleStats.getConversions();
        var adScheduleCost = adScheduleStats.getCost();
        var calculatedBidAdjustment = adScheduleConvRate / campaignConvRate;
        var oldBidModifier = adSchedule.getBidModifier();
        var adScheduleName = adSchedule.getDayOfWeek() + ' @ ' + adSchedule.getStartHour();
        

        if( adScheduleConversions > 0 ) {
        
          // Conversion rate MORE than average, but current bid is negative. Increase by 10%.      
          if( adScheduleConvRate > campaignConvRate && oldBidModifier < MAX_MIN_LEVEL ) {
            if( calculatedBidAdjustment > (oldBidModifier + MAX_INCREASE) ) {
              var newBidModifier = oldBidModifier + MAX_INCREASE;
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; increase bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' high conversion rate');            
            }
            
          // Conversion rate LESS than the average. Drop bids by 10%.
          } else if (adScheduleConvRate < campaignConvRate) {
            if( calculatedBidAdjustment < (oldBidModifier - MAX_INCREASE) ) {
              var newBidModifier = Math.max(Math.min(oldBidModifier - MAX_INCREASE, 0.9),0.1);
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; lower bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' low conversion rate');           
            }          
          }
        
          // Many Conversions. Increase bids by 10%.
          if( adScheduleConversions > CONVERSION_THRESHOLD ) {
            if( calculatedBidAdjustment > (oldBidModifier + MAX_INCREASE) ) {
              var newBidModifier = oldBidModifier + MAX_INCREASE;
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; increase bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' Many Conversions, Good CPA');               
            } 
          }
        }
        
        // Zero Conversions, Hight Cost. Drop bids by 10%.
        if( adScheduleConversions == 0 && adScheduleCost > CONVERSION_VALUE  ) { 
              var newBidModifier = Math.max(Math.min(oldBidModifier - MAX_INCREASE, 0.9),0.1);
              adSchedule.setBidModifier(newBidModifier);           
              Logger.log('*** UPDATE: Ad Schedule: ' + adScheduleName 
                   + '; lower bid: from ' + oldBidModifier + ' to ' + newBidModifier
                   + ' Zero conversions, high cost');    
        }        
      }
  }   
}


// Mobile Bids
function setMobileBidModifier() {
  var campaignIterator = AdWordsApp.campaigns()
      .withCondition('Name = "INSERT_CAMPAIGN_NAME_HERE"')
      .get();
  if (campaignIterator.hasNext()) {
    var campaign = campaignIterator.next();
    // Retrieve the mobile target for campaign.
    var mobileTargetIterator = campaign.targeting().platforms().mobile().get();
    if (mobileTargetIterator.hasNext()) {
      mobileTarget = mobileTargetIterator.next();
      // Set the bid modifier for mobile platform.
      mobileTarget.setBidModifier(1.5);
    }
  }
}


function formatSchedule(schedule) {
  function zeroPad(number) { return Utilities.formatString('%02d', number); }
  return schedule.getDayOfWeek() + ', ' +
      schedule.getStartHour() + ':' + zeroPad(schedule.getStartMinute()) +
      ' to ' + schedule.getEndHour() + ':' + zeroPad(schedule.getEndMinute());
}

